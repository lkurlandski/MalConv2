"""

"""

from pathlib import Path

import lief
import torch
from torch import Tensor
import torch.functional as F

from classifier import get_model, MALCONV_PATH
from corpora import read_binary
from explain import BASELINE


def alter_malware_code_section(malware_file: Path, attributions_file: Path):

    binary = lief.parse(malware_file.as_posix())
    try:
        section = binary.get_section(".text")
    except lief.not_found as e:
        raise e
    lower, upper = section.offset, section.offset + section.size
    attributions = torch.load(attributions_file)[lower:upper]

    model = get_model(MALCONV_PATH)
    X = Tensor(read_binary(malware_file)).unsqueeze(0)
    conf = F.softmax(model(X)[0], dim=-1).data[:, 1].detach().cpu().numpy().ravel()

    model_confidences = [conf]
    max_attr = 1
    while max_attr > 0:
        max_attr_lower = attributions.argmax()
        max_attr = attributions[max_attr_lower]
        for max_attr_upper in range(max_attr_lower, attributions.shape[0]):
            if attributions[max_attr_upper] < max_attr:
                break
        attributions[max_attr_lower:max_attr_upper] = -1
        X[max_attr_lower:max_attr_upper] = BASELINE
        conf = F.softmax(model(X)[0], dim=-1).data[:, 1].detach().cpu().numpy().ravel()
        model_confidences.append(conf)

    return model_confidences


def main():

    for malware_file, attributions_file in zip():
        pass


if __name__ == "__main__":
    main()
